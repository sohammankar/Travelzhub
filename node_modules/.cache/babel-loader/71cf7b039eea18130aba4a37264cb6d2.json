{"ast":null,"code":"var _jsxFileName = \"/Users/sohammankar/Desktop/project_travel_advisor-master/src/components/Map/Map.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport { Paper, Typography, useMediaQuery } from '@material-ui/core';\nimport LocationOnOutlinedIcon from '@material-ui/icons/LocationOnOutlined';\nimport Rating from '@material-ui/lab/Rating';\nimport mapStyles from '../../mapStyles.js';\nimport useStyles from './styles.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Map = ({\n  coords,\n  places,\n  setCoords,\n  setBounds,\n  setChildClicked,\n  weatherData\n}) => {\n  _s();\n\n  var _weatherData$list;\n\n  const matches = useMediaQuery('(min-width:600px)');\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.mapContainer,\n    children: /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: 'AIzaSyCSnH4z7_-SGiO_q_ab69pPDVQRnzeB3Mg'\n      },\n      defaultCenter: coords,\n      center: coords,\n      defaultZoom: 14,\n      margin: [50, 50, 50, 50],\n      options: {\n        disableDefaultUI: true,\n        zoomControl: true,\n        styles: mapStyles\n      },\n      onChange: e => {\n        setCoords({\n          lat: e.center.lat,\n          lng: e.center.lng\n        });\n        setBounds({\n          ne: e.marginBounds.ne,\n          sw: e.marginBounds.sw\n        });\n      },\n      onChildClick: child => setChildClicked(child),\n      children: [places.length && places.map((place, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.markerContainer,\n        lat: Number(place.latitude),\n        lng: Number(place.longitude),\n        children: !matches ? /*#__PURE__*/_jsxDEV(LocationOnOutlinedIcon, {\n          color: \"primary\",\n          fontSize: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          className: classes.paper,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.typography,\n            variant: \"subtitle2\",\n            gutterBottom: true,\n            children: [\" \", place.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: classes.pointer,\n            src: place.photo ? place.photo.images.large.url : 'https://www.foodserviceandhospitality.com/wp-content/uploads/2016/09/Restaurant-Placeholder-001.jpg'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Rating, {\n            name: \"read-only\",\n            size: \"small\",\n            value: Number(place.rating),\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this)), (weatherData === null || weatherData === void 0 ? void 0 : (_weatherData$list = weatherData.list) === null || _weatherData$list === void 0 ? void 0 : _weatherData$list.length) && weatherData.list.map((data, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        lat: data.coord.lat,\n        lng: data.coord.lon,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://openweathermap.org/img/w/${data.weather[0].icon}.png`,\n          height: \"100px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Map, \"4EWvdi9usecyIKNiFG0lyeeiHTY=\", false, function () {\n  return [useMediaQuery, useStyles];\n});\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/sohammankar/Desktop/project_travel_advisor-master/src/components/Map/Map.js"],"names":["React","GoogleMapReact","Paper","Typography","useMediaQuery","LocationOnOutlinedIcon","Rating","mapStyles","useStyles","Map","coords","places","setCoords","setBounds","setChildClicked","weatherData","matches","classes","mapContainer","key","disableDefaultUI","zoomControl","styles","e","lat","center","lng","ne","marginBounds","sw","child","length","map","place","i","markerContainer","Number","latitude","longitude","paper","typography","name","pointer","photo","images","large","url","rating","list","data","coord","lon","weather","icon"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,KAAT,EAAgBC,UAAhB,EAA4BC,aAA5B,QAAiD,mBAAjD;AACA,OAAOC,sBAAP,MAAmC,uCAAnC;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;AAEA,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,MAAV;AAAkBC,EAAAA,SAAlB;AAA6BC,EAAAA,SAA7B;AAAwCC,EAAAA,eAAxC;AAAyDC,EAAAA;AAAzD,CAAD,KAA4E;AAAA;;AAAA;;AACtF,QAAMC,OAAO,GAAGZ,aAAa,CAAC,mBAAD,CAA7B;AACA,QAAMa,OAAO,GAAGT,SAAS,EAAzB;AAEA,sBACE;AAAK,IAAA,SAAS,EAAES,OAAO,CAACC,YAAxB;AAAA,2BACE,QAAC,cAAD;AACE,MAAA,gBAAgB,EAAE;AAAEC,QAAAA,GAAG,EAAE;AAAP,OADpB;AAEE,MAAA,aAAa,EAAET,MAFjB;AAGE,MAAA,MAAM,EAAEA,MAHV;AAIE,MAAA,WAAW,EAAE,EAJf;AAKE,MAAA,MAAM,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,CALV;AAME,MAAA,OAAO,EAAE;AAAEU,QAAAA,gBAAgB,EAAE,IAApB;AAA0BC,QAAAA,WAAW,EAAE,IAAvC;AAA6CC,QAAAA,MAAM,EAAEf;AAArD,OANX;AAOE,MAAA,QAAQ,EAAGgB,CAAD,IAAO;AACfX,QAAAA,SAAS,CAAC;AAAEY,UAAAA,GAAG,EAAED,CAAC,CAACE,MAAF,CAASD,GAAhB;AAAqBE,UAAAA,GAAG,EAAEH,CAAC,CAACE,MAAF,CAASC;AAAnC,SAAD,CAAT;AACAb,QAAAA,SAAS,CAAC;AAAEc,UAAAA,EAAE,EAAEJ,CAAC,CAACK,YAAF,CAAeD,EAArB;AAAyBE,UAAAA,EAAE,EAAEN,CAAC,CAACK,YAAF,CAAeC;AAA5C,SAAD,CAAT;AACD,OAVH;AAWE,MAAA,YAAY,EAAGC,KAAD,IAAWhB,eAAe,CAACgB,KAAD,CAX1C;AAAA,iBAaGnB,MAAM,CAACoB,MAAP,IAAiBpB,MAAM,CAACqB,GAAP,CAAW,CAACC,KAAD,EAAQC,CAAR,kBAC3B;AACE,QAAA,SAAS,EAAEjB,OAAO,CAACkB,eADrB;AAEE,QAAA,GAAG,EAAEC,MAAM,CAACH,KAAK,CAACI,QAAP,CAFb;AAGE,QAAA,GAAG,EAAED,MAAM,CAACH,KAAK,CAACK,SAAP,CAHb;AAAA,kBAMG,CAACtB,OAAD,gBACG,QAAC,sBAAD;AAAwB,UAAA,KAAK,EAAC,SAA9B;AAAwC,UAAA,QAAQ,EAAC;AAAjD;AAAA;AAAA;AAAA;AAAA,gBADH,gBAGG,QAAC,KAAD;AAAO,UAAA,SAAS,EAAE,CAAlB;AAAqB,UAAA,SAAS,EAAEC,OAAO,CAACsB,KAAxC;AAAA,kCACE,QAAC,UAAD;AAAY,YAAA,SAAS,EAAEtB,OAAO,CAACuB,UAA/B;AAA2C,YAAA,OAAO,EAAC,WAAnD;AAA+D,YAAA,YAAY,MAA3E;AAAA,4BAA8EP,KAAK,CAACQ,IAApF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AACE,YAAA,SAAS,EAAExB,OAAO,CAACyB,OADrB;AAEE,YAAA,GAAG,EAAET,KAAK,CAACU,KAAN,GAAcV,KAAK,CAACU,KAAN,CAAYC,MAAZ,CAAmBC,KAAnB,CAAyBC,GAAvC,GAA6C;AAFpD;AAAA;AAAA;AAAA;AAAA,kBAFF,eAME,QAAC,MAAD;AAAQ,YAAA,IAAI,EAAC,WAAb;AAAyB,YAAA,IAAI,EAAC,OAA9B;AAAsC,YAAA,KAAK,EAAEV,MAAM,CAACH,KAAK,CAACc,MAAP,CAAnD;AAAmE,YAAA,QAAQ;AAA3E;AAAA;AAAA;AAAA;AAAA,kBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AATN,SAIOb,CAJP;AAAA;AAAA;AAAA;AAAA,cADgB,CAbpB,EAkCG,CAAAnB,WAAW,SAAX,IAAAA,WAAW,WAAX,iCAAAA,WAAW,CAAEiC,IAAb,wEAAmBjB,MAAnB,KAA6BhB,WAAW,CAACiC,IAAZ,CAAiBhB,GAAjB,CAAqB,CAACiB,IAAD,EAAOf,CAAP,kBACjD;AAAa,QAAA,GAAG,EAAEe,IAAI,CAACC,KAAL,CAAW1B,GAA7B;AAAkC,QAAA,GAAG,EAAEyB,IAAI,CAACC,KAAL,CAAWC,GAAlD;AAAA,+BACE;AAAK,UAAA,GAAG,EAAG,mCAAkCF,IAAI,CAACG,OAAL,CAAa,CAAb,EAAgBC,IAAK,MAAlE;AAAyE,UAAA,MAAM,EAAC;AAAhF;AAAA;AAAA;AAAA;AAAA;AADF,SAAUnB,CAAV;AAAA;AAAA;AAAA;AAAA,cAD4B,CAlChC;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA4CD,CAhDD;;GAAMzB,G;UACYL,a,EACAI,S;;;KAFZC,G;AAkDN,eAAeA,GAAf","sourcesContent":["import React from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport { Paper, Typography, useMediaQuery } from '@material-ui/core';\nimport LocationOnOutlinedIcon from '@material-ui/icons/LocationOnOutlined';\nimport Rating from '@material-ui/lab/Rating';\n\nimport mapStyles from '../../mapStyles.js';\nimport useStyles from './styles.js';\n\nconst Map = ({ coords, places, setCoords, setBounds, setChildClicked, weatherData }) => {\n  const matches = useMediaQuery('(min-width:600px)');\n  const classes = useStyles();\n\n  return (\n    <div className={classes.mapContainer}>\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: 'AIzaSyCSnH4z7_-SGiO_q_ab69pPDVQRnzeB3Mg' }}\n        defaultCenter={coords}\n        center={coords}\n        defaultZoom={14}\n        margin={[50, 50, 50, 50]}\n        options={{ disableDefaultUI: true, zoomControl: true, styles: mapStyles }}\n        onChange={(e) => {\n          setCoords({ lat: e.center.lat, lng: e.center.lng });\n          setBounds({ ne: e.marginBounds.ne, sw: e.marginBounds.sw });\n        }}\n        onChildClick={(child) => setChildClicked(child)}\n      >\n        {places.length && places.map((place, i) => (\n          <div\n            className={classes.markerContainer}\n            lat={Number(place.latitude)}\n            lng={Number(place.longitude)}\n            key={i}\n          >\n            {!matches\n              ? <LocationOnOutlinedIcon color=\"primary\" fontSize=\"large\" />\n              : (\n                <Paper elevation={3} className={classes.paper}>\n                  <Typography className={classes.typography} variant=\"subtitle2\" gutterBottom> {place.name}</Typography>\n                  <img\n                    className={classes.pointer}\n                    src={place.photo ? place.photo.images.large.url : 'https://www.foodserviceandhospitality.com/wp-content/uploads/2016/09/Restaurant-Placeholder-001.jpg'}\n                  />\n                  <Rating name=\"read-only\" size=\"small\" value={Number(place.rating)} readOnly />\n                </Paper>\n              )}\n          </div>\n        ))}\n        {weatherData?.list?.length && weatherData.list.map((data, i) => (\n          <div key={i} lat={data.coord.lat} lng={data.coord.lon}>\n            <img src={`http://openweathermap.org/img/w/${data.weather[0].icon}.png`} height=\"100px\" />\n          </div>\n        ))}\n      </GoogleMapReact>\n    </div>\n  );\n};\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}