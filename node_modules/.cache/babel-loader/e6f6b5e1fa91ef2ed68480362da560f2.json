{"ast":null,"code":"import _slicedToArray from\"/Users/sohammankar/Desktop/project_travel_advisor-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{CssBaseline,Grid}from'@material-ui/core';import{getPlacesData,getWeatherData}from'./api/travelAdvisorAPI';import Header from'./components/Header/Header';import List from'./components/List/List';import Map from'./components/Map/Map';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var App=function App(){var _useState=useState('restaurants'),_useState2=_slicedToArray(_useState,2),type=_useState2[0],setType=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),rating=_useState4[0],setRating=_useState4[1];var _useState5=useState({}),_useState6=_slicedToArray(_useState5,2),coords=_useState6[0],setCoords=_useState6[1];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),bounds=_useState8[0],setBounds=_useState8[1];var _useState9=useState([]),_useState10=_slicedToArray(_useState9,2),weatherData=_useState10[0],setWeatherData=_useState10[1];var _useState11=useState([]),_useState12=_slicedToArray(_useState11,2),filteredPlaces=_useState12[0],setFilteredPlaces=_useState12[1];var _useState13=useState([]),_useState14=_slicedToArray(_useState13,2),places=_useState14[0],setPlaces=_useState14[1];var _useState15=useState(null),_useState16=_slicedToArray(_useState15,2),autocomplete=_useState16[0],setAutocomplete=_useState16[1];var _useState17=useState(null),_useState18=_slicedToArray(_useState17,2),childClicked=_useState18[0],setChildClicked=_useState18[1];var _useState19=useState(false),_useState20=_slicedToArray(_useState19,2),isLoading=_useState20[0],setIsLoading=_useState20[1];useEffect(function(){navigator.geolocation.getCurrentPosition(function(_ref){var _ref$coords=_ref.coords,latitude=_ref$coords.latitude,longitude=_ref$coords.longitude;setCoords({lat:latitude,lng:longitude});});},[]);useEffect(function(){var filtered=places.filter(function(place){return Number(place.rating)>rating;});setFilteredPlaces(filtered);},[rating]);useEffect(function(){if(bounds){setIsLoading(true);getWeatherData(coords.lat,coords.lng).then(function(data){return setWeatherData(data);});getPlacesData(type,bounds.sw,bounds.ne).then(function(data){setPlaces(data===null||data===void 0?void 0:data.filter(function(place){return place.name&&place.num_reviews>0;}));setFilteredPlaces([]);setRating('');setIsLoading(false);});}},[bounds,type]);var onLoad=function onLoad(autoC){return setAutocomplete(autoC);};var onPlaceChanged=function onPlaceChanged(){var lat=autocomplete.getPlace().geometry.location.lat();var lng=autocomplete.getPlace().geometry.location.lng();setCoords({lat:lat,lng:lng});};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(CssBaseline,{}),/*#__PURE__*/_jsx(Header,{onPlaceChanged:onPlaceChanged,onLoad:onLoad}),/*#__PURE__*/_jsxs(Grid,{container:true,spacing:3,style:{width:'100%'},children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:4,children:/*#__PURE__*/_jsx(List,{isLoading:isLoading,childClicked:childClicked,places:filteredPlaces.length?filteredPlaces:places,type:type,setType:setType,rating:rating,setRating:setRating})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:8,style:{display:'flex',justifyContent:'center',alignItems:'center'},children:/*#__PURE__*/_jsx(Map,{setChildClicked:setChildClicked,setBounds:setBounds,setCoords:setCoords,coords:coords,places:filteredPlaces.length?filteredPlaces:places,weatherData:weatherData})})]})]});};export default App;","map":{"version":3,"sources":["/Users/sohammankar/Desktop/project_travel_advisor-master/src/App.js"],"names":["React","useState","useEffect","CssBaseline","Grid","getPlacesData","getWeatherData","Header","List","Map","App","type","setType","rating","setRating","coords","setCoords","bounds","setBounds","weatherData","setWeatherData","filteredPlaces","setFilteredPlaces","places","setPlaces","autocomplete","setAutocomplete","childClicked","setChildClicked","isLoading","setIsLoading","navigator","geolocation","getCurrentPosition","latitude","longitude","lat","lng","filtered","filter","place","Number","then","data","sw","ne","name","num_reviews","onLoad","autoC","onPlaceChanged","getPlace","geometry","location","width","length","display","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { CssBaseline, Grid } from '@material-ui/core';\n\nimport { getPlacesData, getWeatherData } from './api/travelAdvisorAPI';\nimport Header from './components/Header/Header';\nimport List from './components/List/List';\nimport Map from './components/Map/Map';\n\nconst App = () => {\n  const [type, setType] = useState('restaurants');\n  const [rating, setRating] = useState('');\n\n  const [coords, setCoords] = useState({});\n  const [bounds, setBounds] = useState(null);\n\n  const [weatherData, setWeatherData] = useState([]);\n  const [filteredPlaces, setFilteredPlaces] = useState([]);\n  const [places, setPlaces] = useState([]);\n\n  const [autocomplete, setAutocomplete] = useState(null);\n  const [childClicked, setChildClicked] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(({ coords: { latitude, longitude } }) => {\n      setCoords({ lat: latitude, lng: longitude });\n    });\n  }, []);\n\n  useEffect(() => {\n    const filtered = places.filter((place) => Number(place.rating) > rating);\n\n    setFilteredPlaces(filtered);\n  }, [rating]);\n\n  useEffect(() => {\n    if (bounds) {\n      setIsLoading(true);\n\n      getWeatherData(coords.lat, coords.lng)\n        .then((data) => setWeatherData(data));\n\n      getPlacesData(type, bounds.sw, bounds.ne)\n        .then((data) => {\n          setPlaces(data?.filter((place) => place.name && place.num_reviews > 0));\n          setFilteredPlaces([]);\n          setRating('');\n          setIsLoading(false);\n        });\n    }\n  }, [bounds, type]);\n\n  const onLoad = (autoC) => setAutocomplete(autoC);\n\n  const onPlaceChanged = () => {\n    const lat = autocomplete.getPlace().geometry.location.lat();\n    const lng = autocomplete.getPlace().geometry.location.lng();\n\n    setCoords({ lat, lng });\n  };\n\n  return (\n    <>\n      <CssBaseline />\n      <Header onPlaceChanged={onPlaceChanged} onLoad={onLoad} />\n      <Grid container spacing={3} style={{ width: '100%' }}>\n        <Grid item xs={12} md={4}>\n          <List\n            isLoading={isLoading}\n            childClicked={childClicked}\n            places={filteredPlaces.length ? filteredPlaces : places}\n            type={type}\n            setType={setType}\n            rating={rating}\n            setRating={setRating}\n          />\n        </Grid>\n        <Grid item xs={12} md={8} style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n          <Map\n            setChildClicked={setChildClicked}\n            setBounds={setBounds}\n            setCoords={setCoords}\n            coords={coords}\n            places={filteredPlaces.length ? filteredPlaces : places}\n            weatherData={weatherData}\n          />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}